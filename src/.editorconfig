root = true
# This is declared as the master config file

# Don't use tabs for indentation.
[*]
indent_style = space
end_of_line = crlf

# Xml project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# Xml config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

# Code files
[*.{cs,csx,vb,vbx}]
indent_size = 4
insert_final_newline = false
charset = utf-8-bom
trim_trailing_whitespace = true

############################
#    Coding Conventions    #
############################

# New line preference
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left

# Always use `this` qualifier
dotnet_style_qualification_for_field = true : error
dotnet_style_qualification_for_property = true : error
dotnet_style_qualification_for_method = true : error
dotnet_style_qualification_for_event = true : error

# Prefer `int` over `Int32`
dotnet_style_predefined_type_for_locals_parameters_members = true : error
dotnet_style_predefined_type_for_member_access = true : error

# Require accessibility modifiers (public, private, etc.)
dotnet_style_require_accessibility_modifiers = always : error
csharp_preferred_modifier_order = private,protected,internal,public,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async : none

# Fields should always prefer `readonly`
dotnet_style_readonly_field = true : suggestion

# Require shorthand declaration of objects, collections, properties, and tuples
dotnet_style_object_initializer = true : error
dotnet_style_collection_initializer = true : error
dotnet_style_explicit_tuple_names = true : error
dotnet_style_prefer_inferred_tuple_names = true : error
dotnet_style_prefer_inferred_anonymous_type_member_names = true : error
dotnet_style_prefer_auto_properties = true : error
dotnet_style_prefer_is_null_check_over_reference_equality_method = true : error

# Use ?. and ?? when possible
dotnet_style_coalesce_expression = true : error
dotnet_style_null_propagation = true : error

# Prefer `var` over specifying the type
csharp_style_var_for_built_in_types = true : error
csharp_style_var_when_type_is_apparent = true : error
csharp_style_var_elsewhere = true : error

# Use `=>` shorthand when possible
csharp_style_expression_bodied_accessors = when_on_single_line : error
csharp_style_expression_bodied_constructors = false : silent
csharp_style_expression_bodied_indexers = when_on_single_line : error
csharp_style_expression_bodied_lambdas = when_on_single_line : error
csharp_style_expression_bodied_local_functions = false : silent
csharp_style_expression_bodied_methods = false : silent
csharp_style_expression_bodied_operators = false : silent
csharp_style_expression_bodied_properties = when_on_single_line : error

# Use `is` and `as` shorthand for null-checking
csharp_style_pattern_matching_over_is_with_cast_check = true : error
csharp_style_pattern_matching_over_as_with_null_check = true : error

# Declare `out` parameters inline
csharp_style_inlined_variable_declaration = true : error

# Expression-level preferences
csharp_style_inlined_variable_declaration = true : error
dotnet_style_coalesce_expression = true : error
dotnet_style_collection_initializer = true : error
dotnet_style_explicit_tuple_names = true : error
dotnet_style_null_propagation = true : error
dotnet_style_object_initializer = true : error
dotnet_style_prefer_auto_properties = true : error
dotnet_style_prefer_compound_assignment = true : error
dotnet_style_prefer_conditional_expression_over_assignment = true : silent
dotnet_style_prefer_conditional_expression_over_return = true : silent
dotnet_style_prefer_inferred_anonymous_type_member_names = true : error
dotnet_style_prefer_inferred_tuple_names = true : error
dotnet_style_prefer_is_null_check_over_reference_equality_method = true : error

# Field preferences
dotnet_style_readonly_field = true : error

# Parameter preferences
dotnet_code_quality_unused_parameters = all : error

# Prefer tuple deconstruction and local functions
csharp_style_deconstructed_variable_declaration = true : error
csharp_style_pattern_local_over_anonymous_function = true : error

# Expression-level preferences
csharp_prefer_simple_default_expression = true : error
csharp_style_prefer_index_operator = true : suggestion
csharp_style_prefer_range_operator = true : suggestion
csharp_style_unused_value_assignment_preference = discard_variable : error
csharp_style_unused_value_expression_statement_preference = discard_variable : silent

# Stylize null-check exception throwing and `this.Event?.Invoke()`
csharp_style_throw_expression = true : error
csharp_style_conditional_delegate_call = true : error

# Don't use braces on single-line if/for/etc. statements
csharp_prefer_braces = false : silent

# Code style defaults
dotnet_sort_system_directives_first = true
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = false

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity : silent
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity : suggestion
dotnet_style_parentheses_in_other_operators = never_if_unnecessary : error
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity : silent

############################
#    Naming Conventions    #
############################

## Styles

# IBeginsWithI
dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.capitalization = pascal_case

# PascalCase
dotnet_naming_style.pascal_case.capitalization = pascal_case

# s_underscoreCamelCase
dotnet_naming_style.s_underscore_camel_case.required_prefix = s_
dotnet_naming_style.s_underscore_camel_case.capitalization = camel_case

# camelCase
dotnet_naming_style.camel_case.capitalization = camel_case

# _underscoreCamelCase
dotnet_naming_style.underscore_camel_case.required_prefix = _
dotnet_naming_style.underscore_camel_case.capitalization = camel_case

## Rules

# Constants
dotnet_naming_rule.constants_must_be_pascal.symbols = constants_symbols
dotnet_naming_rule.constants_must_be_pascal.style = pascal_case
dotnet_naming_rule.constants_must_be_pascal.severity = error
dotnet_naming_symbols.constants_symbols.applicable_kinds = field
dotnet_naming_symbols.constants_symbols.applicable_accessibilities = *
dotnet_naming_symbols.constants_symbols.required_modifiers = const

# Interfaces
dotnet_naming_rule.interface_must_start_with_i.symbols = interface_symbols
dotnet_naming_rule.interface_must_start_with_i.style = begins_with_i
dotnet_naming_rule.interface_must_start_with_i.severity = error
dotnet_naming_symbols.interface_symbols.applicable_kinds = interface
dotnet_naming_symbols.interface_symbols.applicable_accessibilities = *

# Types (class, struct, enum)
dotnet_naming_rule.types_must_be_pascal.symbols = types_symbols
dotnet_naming_rule.types_must_be_pascal.style = pascal_case
dotnet_naming_rule.types_must_be_pascal.severity = error
dotnet_naming_symbols.types_symbols.applicable_kinds = class,struct,enum
dotnet_naming_symbols.types_symbols.applicable_accessibilities = *

# Non-field Members (property, method, event, delegate)
dotnet_naming_rule.non_field_members_must_be_pascal.symbols = non_field_members_symbols
dotnet_naming_rule.non_field_members_must_be_pascal.style = pascal_case
dotnet_naming_rule.non_field_members_must_be_pascal.severity = error
dotnet_naming_symbols.non_field_members_symbols.applicable_kinds = property,method,event,delegate,local_function
dotnet_naming_symbols.non_field_members_symbols.applicable_accessibilities = *

# Non-private Static Fields
dotnet_naming_rule.non_prive_static_fields_must_be_pascal.symbols = non_private_static_fields
dotnet_naming_rule.non_prive_static_fields_must_be_pascal.style = pascal_case
dotnet_naming_rule.non_prive_static_fields_must_be_pascal.severity = error
dotnet_naming_symbols.non_private_static_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_static_fields.applicable_accessibilities = public,protected,internal,protected_internal,private_protected
dotnet_naming_symbols.non_private_static_fields.required_modifiers = static

# Private Static Fields
dotnet_naming_rule.private_static_fields_must_be_underscore_camel.symbols = private_static_fields_symbols
dotnet_naming_rule.private_static_fields_must_be_underscore_camel.style = s_underscore_camel_case
dotnet_naming_rule.private_static_fields_must_be_underscore_camel.severity = error
dotnet_naming_symbols.private_static_fields_symbols.applicable_kinds = field
dotnet_naming_symbols.private_static_fields_symbols.applicable_accessibilities = private
dotnet_naming_symbols.private_static_fields_symbols.required_modifiers = static

# Private Fields
dotnet_naming_rule.private_fields_must_be_underscore_camel.symbols = private_fields_symbols
dotnet_naming_rule.private_fields_must_be_underscore_camel.style = underscore_camel_case
dotnet_naming_rule.private_fields_must_be_underscore_camel.severity = error
dotnet_naming_symbols.private_fields_symbols.applicable_kinds = field
dotnet_naming_symbols.private_fields_symbols.applicable_accessibilities = private

# Public or Protected Fields
dotnet_naming_rule.public_protected_fields_must_be_pascal.symbols = public_protected_fields_symbols
dotnet_naming_rule.public_protected_fields_must_be_pascal.style = pascal_case
dotnet_naming_rule.public_protected_fields_must_be_pascal.severity = error
dotnet_naming_symbols.public_protected_fields_symbols.applicable_kinds = field
dotnet_naming_symbols.public_protected_fields_symbols.applicable_accessibilities = public,protected,internal,protected_internal,private_protected

# Parameters
dotnet_naming_rule.parameters_must_be_camel.symbols = parameters_symbols
dotnet_naming_rule.parameters_must_be_camel.style = camel_case
dotnet_naming_rule.parameters_must_be_camel.severity = error
dotnet_naming_symbols.parameters_symbols.applicable_kinds = parameter
dotnet_naming_symbols.parameters_symbols.applicable_accessibilities = *